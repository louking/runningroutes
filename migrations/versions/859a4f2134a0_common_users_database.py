"""common users database

Revision ID: 859a4f2134a0
Revises: d7fd8934db04
Create Date: 2022-05-07 17:24:50.468626

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
import runningroutes

# revision identifiers, used by Alembic.
revision = '859a4f2134a0'
down_revision = 'd7fd8934db04'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    localinterest = op.create_table('localinterest',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('interest_id', sa.Integer(), nullable=True),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('localuser',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.Column('given_name', sa.String(length=256), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('interest_id', sa.Integer(), nullable=True),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['interest_id'], ['localinterest.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # get interest ids and insert into localinterests before dropping interest table, and before creating constraints
    conn = op.get_bind()
    res = conn.execute("select id from interest")
    interestids = res.fetchall()
    interestids.sort(key=lambda i:i[0])
    # make localinterest id match interest id to make relationship match
    # NOTE: this assumes interest id in common database matches this database
    localinterests = [{'id': i[0], 'interest_id': i[0]} for i in interestids]
    op.bulk_insert(localinterest, localinterests)
    
    op.drop_constraint('icon_ibfk_1', 'icon', type_='foreignkey')
    op.create_foreign_key(None, 'icon', 'localinterest', ['interest_id'], ['id'])
    op.drop_constraint('iconlocation_ibfk_1', 'iconlocation', type_='foreignkey')
    op.create_foreign_key(None, 'iconlocation', 'localinterest', ['interest_id'], ['id'])
    op.drop_constraint('iconmap_ibfk_1', 'iconmap', type_='foreignkey')
    op.create_foreign_key(None, 'iconmap', 'localinterest', ['interest_id'], ['id'])
    op.drop_constraint('iconsubtype_ibfk_1', 'iconsubtype', type_='foreignkey')
    op.create_foreign_key(None, 'iconsubtype', 'localinterest', ['interest_id'], ['id'])
    op.drop_constraint('files_ibfk_1', 'files', type_='foreignkey')
    op.create_foreign_key(None, 'files', 'localinterest', ['interest_id'], ['id'])
    op.drop_constraint('route_ibfk_1', 'route', type_='foreignkey')
    op.create_foreign_key(None, 'route', 'localinterest', ['interest_id'], ['id'])

    op.drop_table('users_interests')
    op.drop_table('roles_users')
    op.drop_index('name', table_name='role')
    op.drop_table('role')
    op.drop_index('email', table_name='user')
    op.drop_table('user')
    op.drop_table('interest')
    op.alter_column('icon', 'isAddrShown',
               existing_type=mysql.TINYINT(display_width=1),
               type_=sa.Boolean(),
               existing_nullable=True)
    op.alter_column('icon', 'isShownInTable',
               existing_type=mysql.TINYINT(display_width=1),
               type_=sa.Boolean(),
               existing_nullable=True)
    op.alter_column('icon', 'isShownOnMap',
               existing_type=mysql.TINYINT(display_width=1),
               type_=sa.Boolean(),
               existing_nullable=True)
    op.alter_column('location', 'geoloc_required',
               existing_type=mysql.TINYINT(display_width=1),
               type_=sa.Boolean(),
               existing_nullable=True)
    op.alter_column('route', 'active',
               existing_type=mysql.TINYINT(display_width=1),
               type_=runningroutes.models.LiberalBoolean(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'route', type_='foreignkey')
    op.create_foreign_key('route_ibfk_1', 'route', 'interest', ['interest_id'], ['id'])
    op.alter_column('route', 'active',
               existing_type=runningroutes.models.LiberalBoolean(),
               type_=mysql.TINYINT(display_width=1),
               existing_nullable=True)
    op.alter_column('location', 'geoloc_required',
               existing_type=sa.Boolean(),
               type_=mysql.TINYINT(display_width=1),
               existing_nullable=True)
    op.drop_constraint(None, 'iconsubtype', type_='foreignkey')
    op.create_foreign_key('iconsubtype_ibfk_1', 'iconsubtype', 'interest', ['interest_id'], ['id'])
    op.drop_constraint(None, 'iconmap', type_='foreignkey')
    op.create_foreign_key('iconmap_ibfk_1', 'iconmap', 'interest', ['interest_id'], ['id'])
    op.drop_constraint(None, 'iconlocation', type_='foreignkey')
    op.create_foreign_key('iconlocation_ibfk_1', 'iconlocation', 'interest', ['interest_id'], ['id'])
    op.drop_constraint(None, 'icon', type_='foreignkey')
    op.create_foreign_key('icon_ibfk_1', 'icon', 'interest', ['interest_id'], ['id'])
    op.alter_column('icon', 'isShownOnMap',
               existing_type=sa.Boolean(),
               type_=mysql.TINYINT(display_width=1),
               existing_nullable=True)
    op.alter_column('icon', 'isShownInTable',
               existing_type=sa.Boolean(),
               type_=mysql.TINYINT(display_width=1),
               existing_nullable=True)
    op.alter_column('icon', 'isAddrShown',
               existing_type=sa.Boolean(),
               type_=mysql.TINYINT(display_width=1),
               existing_nullable=True)
    op.drop_constraint(None, 'files', type_='foreignkey')
    op.create_foreign_key('files_ibfk_1', 'files', 'interest', ['interest_id'], ['id'])
    op.create_table('interest',
    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
    sa.Column('version_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    sa.Column('interest', mysql.VARCHAR(length=32), nullable=True),
    sa.Column('description', mysql.VARCHAR(length=512), nullable=True),
    sa.Column('public', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_default_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_table('roles_users',
    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
    sa.Column('user_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    sa.Column('role_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name='roles_users_ibfk_2'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='roles_users_ibfk_1'),
    sa.PrimaryKeyConstraint('id'),
    mysql_default_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_table('users_interests',
    sa.Column('user_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    sa.Column('interest_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['interest_id'], ['interest.id'], name='users_interests_ibfk_2'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='users_interests_ibfk_1'),
    mysql_default_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_table('user',
    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
    sa.Column('version_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    sa.Column('email', mysql.VARCHAR(length=100), nullable=True),
    sa.Column('password', mysql.VARCHAR(length=255), nullable=True),
    sa.Column('name', mysql.VARCHAR(length=256), nullable=True),
    sa.Column('given_name', mysql.VARCHAR(length=256), nullable=True),
    sa.Column('last_login_at', mysql.DATETIME(), nullable=True),
    sa.Column('current_login_at', mysql.DATETIME(), nullable=True),
    sa.Column('last_login_ip', mysql.VARCHAR(length=100), nullable=True),
    sa.Column('current_login_ip', mysql.VARCHAR(length=100), nullable=True),
    sa.Column('login_count', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    sa.Column('active', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True),
    sa.Column('fs_uniquifier', mysql.VARCHAR(length=255), nullable=True),
    sa.Column('confirmed_at', mysql.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_default_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_index('email', 'user', ['email'], unique=True)
    op.create_table('role',
    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
    sa.Column('version_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    sa.Column('name', mysql.VARCHAR(length=32), nullable=True),
    sa.Column('description', mysql.VARCHAR(length=512), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_default_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_index('name', 'role', ['name'], unique=True)
    op.drop_table('localuser')
    op.drop_table('localinterest')
    # ### end Alembic commands ###

